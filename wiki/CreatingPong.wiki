#summary Creating Pong from start to finish
#labels Tutorial

= Creating Pong =

This tutorial show you how to create the game Pong from start to finish using Spritely.

|| *Note:* This tutorial assumes that you are using Spritely 0.8.7 or later. If you are using an earlier version, please upgrade to the latest version. ||

== Create your sprites ==

For Pong, we need 2 different sprites: a paddle and a ball. The player's paddle and the opponent's paddle will both be displayed using the same paddle sprite.

Launch Spritely and create 2 sprites:
   * a 1x1 solid white square for the ball
   * a 1x4 (tall) solid white rectangle for the paddle

Select the paint bucket tool and fill each sprite with white paint.

[http://spritely.googlecode.com/svn/trunk/images/pong/sprites.png http://spritely.googlecode.com/svn/trunk/images/pong/sm/sprites.png]

By default, Spritely creates a 2x2 empty sprite. It is not needed, so you can delete it.

== Name your sprites ==

We need to name the sprites so that we can refer to them (by name) in the code.

You can change the name of a sprite by selecting the "Sprite::Properties..." menu item or by double-clicking the sprite name that is displayed under the sprite list.

Name the ball "Ball" and the paddle "Paddle". Pay attention to capitalization - begin your name with a capital letter and be consistent.

http://spritely.googlecode.com/svn/trunk/images/pong/name_ball.png

http://spritely.googlecode.com/svn/trunk/images/pong/name_paddle.png

== Create a background sprite ==

Click on the "Background Sprites" tab to look at the background sprites.
By default, you should have a single 1x1 background sprite. Use the paint bucket and fill it with black paint.

[http://spritely.googlecode.com/svn/trunk/images/pong/bg_sprites.png http://spritely.googlecode.com/svn/trunk/images/pong/sm/bg_sprites.png]

If you ckick on the "Background Map" tab to view the background map, you'll see that the entire background is now black.

[http://spritely.googlecode.com/svn/trunk/images/pong/bg_map.png http://spritely.googlecode.com/svn/trunk/images/pong/sm/bg_map.png]

== Save your progress ==

Create a new directory: `c:\gamedev\projects\pong`

Select the "File::Save" menu to save your work as `pong.xml`.

== Export project ==

Export a complete GBA project into `c:\gamedev\projects\pong`.

See the [CreatingASimpleSprite Creating a simple sprite] tutorial if you need more information about how this is done.

== Create a project in Programmer's Notepad ==

Launch Programmer's Notepad and create a new project using the New::Project menu item.

Call the project "pong" and store it in the `c:\gamedev\projects\pong` directory that you created earlier.

Right click on the "pong" project and "Add Files". Navigate to the `c:\gamedev\projects\pong\source` directory and add all of the files.

http://spritely.googlecode.com/svn/trunk/images/pong/pnproj.png

See the [UsingProgrammersNotepad Using Programmer's Notepad] tutorial if you need more information about how this is done]

== Build/Run your project ==

Now that we're all set up, we can build and run the project.

When you run the project, you'll see only the ball that you can move around. We need to start modifying the source code to display the other objects and turn this into a complete game.

http://spritely.googlecode.com/svn/trunk/images/pong/ss_01.png

== Define the objects from the sprites ==

We need to define 3 objects for pong: 2 paddles (1 each for the player and opponent) and 1 ball. Let's define these objects.

In the GBA, we can have a maximum of 128 objects, numbered 0 through 127. We're already using object #0 for the player, so we'll use object #1 and #2 for the opponent and ball.

Open `game_state.h` and look for the following line:

{{{
const int kObj_Player = 0;
}}}

This assigned the player object to object #0.

Immediately after this line, add:

{{{
const int kObj_Opponent = 1;
const int kObj_Ball = 2;
}}}

Pay attention to capitalization!

== Add storage for the object locations ==

We need to keep track of each object on the screen, so add the following to the !GameState structure:

Further down in `game_state.h`, look for the following line inside the !GameState class definition:

{{{
// The (x,y) location of the object representing the player.
int _xPlayer, _yPlayer;
}}}

and add the following lines immediately after:

{{{
// The (x,y) location of the opponent's paddle.
int _xOpponent, _yOpponent;

// The (x,y) location of the ball.
int _xBall, _yBall;
}}}

Build your project after making these changes to make sure you don't have any compile errors.

Don't bother running since we haven't changed anything important yet.

== Create the new objects ==

Open `game_state.cpp` and look for the following line in `GameState::GameState()`:

{{{
InitObject(kObj_Player, 0);
}}}

Change this line to:

{{{
InitObject(kObj_Player, kSprite_Paddle);
}}}

This will make the player object user the "Paddle" sprite.

Add the following lines immediately after:

{{{
InitObject(kObj_Opponent, kSprite_Paddle);
InitObject(kObj_Ball, kSprite_Ball);
}}}

These lines create the other 2 objects that we need for the game: the _Opponent_, which also uses a "Paddle" sprite and the _Ball_, which uses a "Ball" sprite.

== Initialize the object location == 

Further down in `InitGameState()`, change:

{{{
// Set the initial location for each object.
_xPlayer = 0;
_yPlayer = 0;
MoveObjectTo(kObj_Player, _xPlayer, _yPlayer);
}}}

These lines move the player object to its initial position. Change the first line to:

{{{
_xPlayer = SCREEN_WIDTH - GetObjectWidth(kObj_Player) - 8;
}}}

This will put the player's paddle on the right side of the screen.

To initialize the remaining objects (the opponent and the ball), add the following lines immediately after:

{{{
_xOpponent = 8;
_yOpponent = 0;
MoveObjectTo(kObj_Opponent, _xOpponent, _yOpponent);

_xBall = SCREEN_WIDTH / 2;
_yBall = 0;
MoveObjectTo(kObj_Ball, _xBall, _yBall);
}}}

== Build/Run ==

If you run now, you'll see 3 objects on the screen in their correct initial positions.

Only the player paddle will move - and it can move all over the screen.

http://spritely.googlecode.com/svn/trunk/images/pong/ss_02.png

Let's make it so that the paddle only goes up/down:

== Restrict player paddle movement ==

In `GameState::Update()`, which is a bit further down in `game_state.cpp`, remove the following lines:

{{{
if (keyHeld & KEY_LEFT)
    dx = -1;
if (keyHeld & KEY_RIGHT)
    dx = 1;
}}}

or, if you prefer, you can simply comment out the lines instead of removing them:

{{{
//if (keyHeld & KEY_LEFT)
//    dx = -1;
//if (keyHeld & KEY_RIGHT)
//    dx = 1;
}}}

Removing this code disables support for the Left and Right arrow keys.

== Build/Run ==

Now if you build and run, the player's paddle only moves up and down.

Let's make the ball move.

== Make the ball move ==

Go to the end of `GameState::Update()` (which is at the end of `game_state.cpp`) and look for:

{{{
// Add additional game state updates here.
}}}

And replace this comment with the following:

{{{
// Move the ball.
_xBall += 1;
_yBall += 1;
MoveObjectTo(kObj_Ball, _xBall, _yBall);
}}}

== Build/Run ==

Build and run. The ball moves, but it only goes down/right and it goes off the screen.
It comes back after a while only to fly off again.

http://spritely.googlecode.com/svn/trunk/images/pong/ss_03.png

We want the ball to move different directions and we want it to bounce when it gets to the
edge of the screen.

== Add storage for the ball direction ==

Just like we need to keep track of the current ball position, we also need to keep
track of its current direction.

Let's make some room to save the balls current direction.
Go back to `game_state.h` and add the following to the !GameState structure:

{{{
// The current direction that the ball is moving (-1 or 1)
int _dxBall, _dyBall;
}}}

== Initialize the ball direction ==

Now go back to `game_state.cpp` and initialize the ball direction.

Look for where you added (at the end of `GameState::GameState()`):

{{{
_xBall = SCREEN_WIDTH / 2;
_yBall = 0;
MoveObjectTo(kObj_Ball, _xBall, _yBall);
}}}

and add the following immediately after:

{{{
// Initialize the ball direction.
_dxBall = 1;
_dyBall = 1;
}}}

and change the ball update code at the end of `GameState::Update()` from:

{{{
_xBall += 1;
_yBall += 1;
MoveObjectTo(kObj_Ball, _xBall, _yBall);
}}}

to:

{{{
_xBall += _dxBall;
_yBall += _dyBall;
MoveObjectTo(kObj_Ball, _xBall, _yBall);
}}}

== Build/Run ==

If you build/run now, it will act the same as before. but now that we're storing the
direction in a variable, we can change it whenever we want.

== Bounce off screen boundaries ==

Let's make the ball respect the screen boundaries.

Add the following immediately *before* the ball move code in `GameState::Update()`:

{{{
// Check where the ball is moving.
int x = _xBall + _dxBall;
int y = _yBall + _dyBall;

// Don't let the ball go off the left/right side of screen.
if (x < 0 || x > SCREEN_WIDTH - GetObjectWidth(kObj_Ball))
    _dxBall *= -1;

// Don't let the ball go off the top/bottom of screen.
if (y < 0 || y > SCREEN_HEIGHT - GetObjectHeight(kObj_Ball))
    _dyBall *= -1;
}}}

The `_dxBall *= -1;` line is interesting. What this does is change `1` to `-1` and `-1` to `1`. So if the ball is moving left (_dxBall = -1), it is changed to move right (_dxBall = 1). Similarly, a ball moving right (_dxBall = 1) is changed to move left (_dxBall = -1).

The `_dyBall *= -1;` does the same thing for the ball moving up/down.

== Build/Run ==

If you build/run now, the ball will bounce around the screen, but it will still ignore the paddles

http://spritely.googlecode.com/svn/trunk/images/pong/ss_04.png

== Bounce off paddles ==

Add the following code just after the code above (but before the `// Move the ball.` comment).

{{{
// Does the ball collide with a paddle?
if (CollideBBox(kObj_Player, kObj_Ball))
    _dxBall = -1;
if (CollideBBox(kObj_Opponent, kObj_Ball))
    _dxBall = 1;
}}}

This code tells the ball to go left (`_dxBall = -1`) if it collides with the player's paddle and to go right (`_dxBall = 1`) if it collides with the opponent's paddle. Note that the y-direction is not affected - if the ball is going up when it hits a paddle, it will continue to go up after it bounces off.

However, if we try to build now, we'll get an error:

{{{
error: 'CollideBBox' was not declared in this scope
}}}

This means that it doesn't know about !CollideBBox. We need to tell it where it is defined.

We do this by adding:

{{{
#include "collision.h"
}}}

at the top of the file. (Add it between `#include "backgrounds.h"` and `#include "game_state.h"`)

== Build/Run ==

Now if you build and run, it will successfully compile and the ball will bounce off the paddles.

http://spritely.googlecode.com/svn/trunk/images/pong/ss_05.png

== Opponent AI ==

The opponent paddle is boring. Let's add some simple AI (_Artificial Intelligence_) to make it play pong.

At the bottom of the `GameState::Update()`, just after the code to move the ball, add the following:

{{{
// Handle opponent AI
dy = 0;
// If the ball is above the paddle
if (_yBall < _yOpponent) {
    // Move the paddle up
    dy = -1;
    // Unless that would move the paddle above the top of the screen
    if (_yOpponent < 0)
        dy = 0;
} else {
    // Otherwise, move the paddle down
    dy = 1;
    // Unless that would move the paddle below the bottom of the screen
    if (_yOpponent > SCREEN_HEIGHT - GetObjectHeight(kObj_Opponent))
        dy = 0;
}
// Move the paddle.
_yOpponent += dy;
MoveObjectTo(kObj_Opponent, _xOpponent, _yOpponent);
}}}

== Build/Run ==

Build and run. The opponent's paddle will move up and down tracking the ball.

== Completed Project ==

Here are links to the completed source files from this tutorial:

   * [http://spritely.googlecode.com/svn/trunk/tutorials/pong/game_state.cpp game_state.cpp]
   * [http://spritely.googlecode.com/svn/trunk/tutorials/pong/game_state.h game_state.h]

And here is a link to the compiled ROM file:

   * [http://spritely.googlecode.com/svn/trunk/tutorials/pong/pong.gba pong.gba]