#summary Adding a second object
#labels Tutorial

= Adding a second object =

The default "game" produced by Spritely, while useful, isn't all that interesting.

In order to make it interesting, you'll need to draw more sprites and (more importantly) modify the source code to make the game do what you want.

This tutorial will show you how to put a second object on the screen.

|| *Note:* This tutorial assumes that you are using Spritely 0.8.7 or later. If you are using an earlier version, please upgrade to the latest version. ||


----

Let's start by opening up the project source code in "Programmer's Notepad".

The easiest way is to double-click the `mygame.pnproj` file in your `c:\gamedev\projects\mygame` directory.

There are 2 source files that we'll be looking at:

{{{
   game_state.h
   game_state.cpp
}}}

These files contain the information that is needed to keep track of the current state of the game.

Open up `game_state.h` by double-clicking on its name in the project window.

You should see the following code at the top of the file:

{{{
// game_state.h
// Global structures to record all game state.
// This file was automatically generated by Spritely

#ifndef _GAME_STATE_H_
#define _GAME_STATE_H_

#include "sprites.h"
#include "backgrounds.h"
#include "animation.h"

// The objects in our game.
// Only 128 objects (0-127) can be defined at any time.
const int kObj_Player = 0;
}}}

For this tutorial, the interesting part of this file is the last line shown above:

{{{
const int kObj_Player = 0;
}}}

With the GBA, you can have up to 128 objects (numbered 0 through 127) on the screen at a time. This statement is saying that object #0 is the player object and we'll be using the name `kObj_Player` to refer to the player in our code.

Let's add a definition for a second object.

Add the following line after the `const int kObj_Player = 0;` line.

{{{
const int kObj_New = 1;
}}}

This says that object #1 will contain information about an object that we'll be referring to as `kObj_New` in the code.

You can use any object number from 0-127 (well, except for 0 since that's taken by the player object).

You can also use a name other than `kObj_New` if you want. If you change the name, be sure to use your new name wherever you see `kObj_New` in the rest of this tutorial.

Now open up `game_state.cpp`. Scroll down until you find the following line:

{{{
InitObject(kObj_Player, 0, _xPlayer, _yPlayer);
}}}

This is the line that places the player object on the screen.

If we add a second line like this one, we can create a second object. However, we need to make sure that we don't create our new object on top of our existing object (the player).

Change the code by adding a second InitObject() line after the first:

{{{
InitObject(kObj_New, 0, 50, 50);
}}}

Your code should now look like this:

{{{
InitObject(kObj_Player, 0, _xPlayer, _yPlayer);
InitObject(kObj_New, 0, 50, 50);
}}}

Note that we're giving different information to the second `InitObject()` call. We're telling it that we're initializing the `kObj_New` object with sprite #0 and we're placing it at screen location (50,50).

Compile and run your code and you should see a second object near the middle of the screen.

You can't move the object, and if you move your player around you'll go right over it. It also looks exactly the same as the player object. We're going to be fixing these problems in the upcoming tutorials.

First, let's fix the new object so that it looks different from the player.

To do this, we need to return to Spritely and draw a new sprite.

After you've created your new sprite. You now need to give each of your sprites a name.

The name of each sprite is shown immediately under the sprite list. By default, sprites are given names like "S1" or "S3". You can rename them by double-clicking on the name.

Name your player sprite "Player" and name your new object sprite "New". Again, feel free to give your sprites different names, bearing in mind that you'll need to use your new sprite names throughout this tutorial.

Now, export your sprites and backgrounds into your project directory.

Do not export a "complete project" or else you will overwrite the code changes that you made earlier.

If you now open up `sprites.h`, you can see how the names that you gave to your sprites are being used in the code.

Scroll down to the bottom of sprites.h. You should see the following code:

{{{
// Sprite IDs
const int kSprite_Player = 0;
const int kSprite_New = 1;
}}}

These definitions We'll be using these names in the code to refer to the sprites that we created.

Now that we've given the sprites names, we can update the `InitObject()` calls to use these new names.

Go back to `game_state.cpp` and look at the code you edited earlier in this tutorial:

{{{
InitObject(kObj_Player, 0, _xPlayer, _yPlayer);
InitObject(kObj_New, 0, 50, 50);
}}}

The second parameter of the `InitObject()` call is the sprite id that is used to create the object. Currently, this is set to 0 for both objects, which means that both objects are using the same sprite (sprite #0).

We're going to change this parameter to use a different sprite for each object.

Change this code to the following:

{{{
InitObject(kObj_Player, kSprite_Player, _xPlayer, _yPlayer);
InitObject(kObj_New, kSprite_New, 50, 50);
}}}

Note that the 0 in each line has been changed to use one of the sprite names that we specified earlier: `kSprite_Player` and `kSprite_New`.

Compile and run your program and you should see that your new object is now based on the new sprite.