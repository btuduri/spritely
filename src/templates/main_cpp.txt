// main.cpp
// Sample %%_PLATFORM_%% project to demonstrate how to display sprites
// This file was automatically generated by Spritely %%_VERSION_%%

%%NDS:%%#include <nds.h>
%%GBA:%%#include <gba_dma.h>
%%GBA:%%#include <gba_interrupt.h>
%%GBA:%%#include <gba_sprites.h>
%%GBA:%%#include <gba_systemcalls.h>
%%GBA:%%#include <gba_video.h>

#include "game_state.h"
#include "object_utils.h"

void InitDevice() {
%%NDS:%%	powerON(POWER_ALL_2D);
%%NDS:%%	
	// Enable interrupts.
	irqInit();
	irqEnable(IRQ_VBLANK);

%%NDS:%%	// Initialize the video mode and VRAM banks.
%%NDS:%%	videoSetMode(MODE_0_2D | DISPLAY_BG0_ACTIVE | DISPLAY_SPR_ACTIVE | DISPLAY_SPR_1D);
%%NDS:%%	vramSetBankA(VRAM_A_MAIN_BG_0x06000000);
%%NDS:%%	vramSetBankB(VRAM_B_MAIN_SPRITE_0x06400000);
%%GBA:%%	// Initialize the video mode.
%%GBA:%%	SetMode(MODE_0 | BG0_ENABLE | OBJ_ENABLE | OBJ_1D_MAP);
}

void InitSprites() {
	// The sprite data is not active until we copy it from our data tables
	// (in the sprites.h file) into the real Palette and Graphics memory.
	// So, let's copy it there now.
	if (kSpritePalette_Size != 0)
		dmaCopy((void*)SpritePalette,(void*)SPRITE_PALETTE, kSpritePalette_Size);
	if (kSpriteTiles_Size != 0)
		dmaCopy((void*)SpriteTiles,(void*)SPRITE_GFX, kSpriteTiles_Size);
}

void InitBackgrounds() {
	// Setup the tiles for Background 0:
	//  256x256 (32x32 tiles) "text" background
	//  16 colors
	//  tiles stored in Tile Data Block 0
	//  tile map stored in Tile Map Block 31
	// ================
	// Set the attributes in the background 0 control reg
%%NDS:%%	BG0_CR = BG_16_COLOR | BG_32x32 | BG_TILE_BASE(0) | BG_MAP_BASE(31);
%%GBA:%%	REG_BG0CNT = BG_16_COLOR | TEXTBG_SIZE_256x256 | BG_TILE_BASE(0) | BG_MAP_BASE(31);
	// Copy Background Palette data into VRAM
	if (kBackgroundPalette_Size != 0)
		dmaCopy((void*)BackgroundPalette,(void*)BG_PALETTE, kBackgroundPalette_Size);
	// Copy the Background tile data into VRAM
	if (kBackgroundTiles_Size != 0)
%%NDS:%%		dmaCopy((void*)BackgroundTiles, (void*)BG_TILE_RAM(0), kBackgroundTiles_Size);
%%GBA:%%		dmaCopy((void*)BackgroundTiles, (void*)TILE_BASE_ADR(0), kBackgroundTiles_Size);
	// Copy the Background tile map into VRAM
	if (kBackgroundTileMap_Size != 0)
%%NDS:%%		dmaCopy((void*)BackgroundTileMap, (void*)BG_MAP_RAM(31), kBackgroundTileMap_Size);
%%GBA:%%		dmaCopy((void*)BackgroundTileMap, (void*)MAP_BASE_ADR(31), kBackgroundTileMap_Size);
}

int main() {
	InitDevice();
	InitSprites();
	InitBackgrounds();

	// Initialize the Objects.
	// This initializes all the objects to "off" so that we don't have garbage
	// appearing on the screen.
	InitializeObjects();

	InitGameState();
	UpdateScreen();

	while (true) {
		// Wait for the vertical blank interrupt so that we update the
		// screen at a constant rate.
%%NDS:%%		swiWaitForVBlank();
%%GBA:%%		VBlankIntrWait();

		UpdateGameState();
		UpdateScreen();
	}
}
