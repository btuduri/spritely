// game_state.cpp
// Routines to manage the current game state
// This file was automatically generated by Spritely %%_VERSION_%%

%%NDS:%%#include <nds.h>
%%GBA:%%#include <gba_input.h>
%%GBA:%%#include <gba_video.h>

#include "animation.h"
#include "backgrounds.h"
#include "game_state.h"
#include "object_utils.h"
#include "sprites.h"

// Constructor
// This is called once at the beginning of the game to set up all of the game objects.
GameState::GameState() {
	// Initialize the objects.
	InitObject(kObj_Player, 0);

	// Set the initial location fo each object.
	_xPlayer = 0;
	_yPlayer = 0;
	MoveObjectTo(kObj_Player, _xPlayer, _yPlayer);
}

// Update
// This is called repeatedly, 60 times per second.
// You check the buttons and update the game state.
void GameState::Update() {
	// Get the current state of all of the buttons.
	scanKeys();

	// Get the buttons that have been newly pressed since the last time we
	// called scanKeys().
	u16 keyPress = keysDown();
	
	// Get the buttons that are currently being pressed (regardless of
	// whether or not we've already handled the button press).
	u16 keyHeld = keysHeld();

	// The arrow keys are used to move the current object.
	// We use kHeld because we want the action to repeat as long as the player is
	// holding down the button.
	int dx = 0;
	int dy = 0;
	if (keyHeld & KEY_LEFT)
		dx = -1;
	if (keyHeld & KEY_RIGHT)
		dx = 1;
	if (keyHeld & KEY_UP)
		dy = -1;
	if (keyHeld & KEY_DOWN)
		dy = 1;

	if (keyPress & KEY_A) {
		// Handle the player pressing the A button.
	}
	
	// If we need to move the player.
	if (dx != 0 || dy != 0) {
		// Move the player to the new location.
		int x = _xPlayer + dx;
		int y = _yPlayer + dy;

		// Get the width/height of the player.
		int width, height;
		GetObjectSize(kObj_Player, &width, &height);

		// Don't let the player go outside the screen boundaries.
		if (x < 0 || x > SCREEN_WIDTH - width)
			dx = 0;
		if (y < 0 || y > SCREEN_HEIGHT - height)
			dy = 0;

		// Record the player's new location.
		_xPlayer += dx;
		_yPlayer += dy;

		// Move the player to the new location.
		MoveObjectTo(kObj_Player, _xPlayer, _yPlayer);
	}
	
	// Add additional game state updates here.
}
